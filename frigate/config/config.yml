# https://blakeblackshear.github.io/frigate/configuration/index#mqtt
mqtt:
  host: 192.168.1.226
  port: 1883

birdseye:
  enabled: True
  mode: continuous

# https://blakeblackshear.github.io/frigate/configuration/index#cameras
cameras:
  inside:
    ffmpeg:
      # use Nvidia GPU for h264 decoding
      input_args:
        - -c:v
        - h264_cuvid
      inputs:
        # sub-stream, lower quality and FPS
        # - path: rtsp://admin:{FRIGATE_RTSP_PASSWORD}@192.168.1.111:554/cam/realmonitor?channel=1&subtype=1
        #   roles:
        #     - detect
        # full 4k stream
        - path: rtsp://admin:{FRIGATE_RTSP_PASSWORD}@192.168.1.111:554/cam/realmonitor?channel=1&subtype=0
          roles:
            - record
    # detect on the sub-stream for improved performance
    detect:
      enabled: False
    #   width: 640
    #   height: 480
    #   fps: 5
    # objects:
    #   track:
    #     - person
    record:
      # Optional: Enable recording
      enabled: True
      retain_days: 10
    rtmp:
      # Required: Enable the live stream
      enabled: False
        # Optional: Configuration for the jpg snapshots written to the clips directory for each event
    snapshots:
      # Optional: Enable writing jpg snapshot to /media/frigate/clips
      # This value can be set via MQTT and will be updated in startup based on retained value
      enabled: True
      # Optional: print a timestamp on the snapshots
      timestamp: False
      # Optional: draw bounding box on the snapshots
      bounding_box: False
      # Optional: crop the snapshot
      crop: False
      # Optional: Camera override for retention settings
      retain:
        # Required: Default retention days
        default: 10
    # Optional: Configuration for the jpg snapshots published via MQTT
    mqtt:
      # Optional: Enable publishing snapshot via mqtt for camera
      # NOTE: Only applies to publishing image data to MQTT via 'frigate/<camera_name>/<object_name>/snapshot'.
      # All other messages will still be published.
      enabled: True
      # Optional: print a timestamp on the snapshots
      timestamp: False
      # Optional: draw bounding box on the snapshots
      bounding_box: False
      # Optional: crop the snapshot
      crop: False
  frontdoor:
    ffmpeg:
      # use Nvidia GPU for h264 decoding
      input_args:
        - -c:v
        - h264_cuvid
      inputs:
        # sub-stream, lower quality and FPS
        # - path: rtsp://admin:{FRIGATE_RTSP_PASSWORD}@192.168.1.110:554/cam/realmonitor?channel=1&subtype=1
        #   roles:
        #     - detect
        # full 4k stream
        - path: rtsp://admin:{FRIGATE_RTSP_PASSWORD}@192.168.1.110:554/cam/realmonitor?channel=1&subtype=0
          roles:
            - record
    # detect on the sub-stream for improved performance
    detect:
      enabled: False
    #   width: 704
    #   height: 480
    #   fps: 5
    # objects:
    #   track:
    #     - person
    record:
      # Optional: Enable recording
      enabled: True
      retain_days: 10
    rtmp:
      # Required: Enable the live stream
      enabled: False
        # Optional: Configuration for the jpg snapshots written to the clips directory for each event
    snapshots:
      # Optional: Enable writing jpg snapshot to /media/frigate/clips
      # This value can be set via MQTT and will be updated in startup based on retained value
      enabled: True
      # Optional: print a timestamp on the snapshots
      timestamp: False
      # Optional: draw bounding box on the snapshots
      bounding_box: False
      # Optional: crop the snapshot
      crop: False
      # Optional: Camera override for retention settings
      retain:
        # Required: Default retention days
        default: 10
    # Optional: Configuration for the jpg snapshots published via MQTT
    mqtt:
      # Optional: Enable publishing snapshot via mqtt for camera
      # NOTE: Only applies to publishing image data to MQTT via 'frigate/<camera_name>/<object_name>/snapshot'.
      # All other messages will still be published.
      enabled: True
      # Optional: print a timestamp on the snapshots
      timestamp: False
      # Optional: draw bounding box on the snapshots
      bounding_box: False
      # Optional: crop the snapshot
      crop: False
  backdoor:
    ffmpeg:
      # use Nvidia GPU for h264 decoding
      input_args:
        - -c:v
        - h264_cuvid
      inputs:
        # sub-stream, lower quality and FPS
        # - path: rtsp://admin:{FRIGATE_RTSP_PASSWORD}@192.168.1.112:554/cam/realmonitor?channel=1&subtype=1
        #   roles:
        #     - detect
        # full 4k stream
        - path: rtsp://admin:{FRIGATE_RTSP_PASSWORD}@192.168.1.112:554/cam/realmonitor?channel=1&subtype=0
          roles:
            - record
    # detect on the sub-stream for improved performance
    detect:
      enabled: False
    #   width: 704
    #   height: 480
    #   fps: 5
    # objects:
    #   track:
    #     - person
    record:
      # Optional: Enable recording
      enabled: True
      retain_days: 10
    rtmp:
      # Required: Enable the live stream
      enabled: False
        # Optional: Configuration for the jpg snapshots written to the clips directory for each event
    snapshots:
      # Optional: Enable writing jpg snapshot to /media/frigate/clips
      # This value can be set via MQTT and will be updated in startup based on retained value
      enabled: True
      # Optional: print a timestamp on the snapshots
      timestamp: False
      # Optional: draw bounding box on the snapshots
      bounding_box: False
      # Optional: crop the snapshot
      crop: False
      # Optional: Camera override for retention settings
      retain:
        # Required: Default retention days
        default: 10
    # Optional: Configuration for the jpg snapshots published via MQTT
    mqtt:
      # Optional: Enable publishing snapshot via mqtt for camera
      # NOTE: Only applies to publishing image data to MQTT via 'frigate/<camera_name>/<object_name>/snapshot'.
      # All other messages will still be published.
      enabled: True
      # Optional: print a timestamp on the snapshots
      timestamp: False
      # Optional: draw bounding box on the snapshots
      bounding_box: False
      # Optional: crop the snapshot
      crop: False
